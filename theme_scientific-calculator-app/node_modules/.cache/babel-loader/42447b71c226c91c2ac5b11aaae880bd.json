{"ast":null,"code":"var _jsxFileName = \"/Users/anikraj/Downloads/engagePulse/theme_scientific-calculator-app/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateCalculation, clearCalculation, equalToCalculation, signCalculation, squareCalculation, squareRootCalculation } from './actions';\nimport CalcButton from './components/CalcButton'; //import ScientificCalcButton from './components/ScientificCalcButton';\n\nclass CalculatorComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      toggle: true\n    };\n  }\n\n  componentDidMount() {\n    // Force scroll on the display\n    // I do this on mount in case reducer is already populated\n    this._forceScrollOnDisplay();\n  }\n\n  componentDidUpdate() {\n    // Force scroll on the display\n    // this function gets called on component update\n    this._forceScrollOnDisplay();\n  } // Replace the operator chars add a span for styling\n  // and replace division and multiplication symbols\n\n\n  _replaceChars(value) {\n    if (value[0] === 0 && value[1] < 0) {\n      var val = value.slice();\n      val.shift();\n      console.log(value);\n      value = value.join(\"\");\n      value = value.replace(/\\//g, '<span class=\"operatorStyle\">÷</span>');\n      value = value.replace(/\\*/g, '<span class=\"operatorStyle\">×</span>');\n      value = value.replace(/\\+/g, '<span class=\"operatorStyle\">+</span>');\n      value = value.replace(/-/g, '<span class=\"operatorStyle\">-</span>');\n      val = val.join(\"\");\n      val = val.replace(/\\//g, '<span class=\"operatorStyle\">÷</span>');\n      val = val.replace(/\\*/g, '<span class=\"operatorStyle\">×</span>');\n      val = val.replace(/\\+/g, '<span class=\"operatorStyle\">+</span>');\n      val = val.replace(/-/g, '<span class=\"operatorStyle\">-</span>');\n      return val;\n    }\n\n    value = value.join(\"\");\n    value = value.replace(/\\//g, '<span class=\"operatorStyle\">÷</span>');\n    value = value.replace(/\\*/g, '<span class=\"operatorStyle\">×</span>');\n    value = value.replace(/\\+/g, '<span class=\"operatorStyle\">+</span>');\n    value = value.replace(/-/g, '<span class=\"operatorStyle\">-</span>');\n    return value;\n  }\n\n  _forceScrollOnDisplay() {\n    // Force scroll on div, put a value in here\n    // instead of calculating the offset\n    // This keeps the latest numbers in display\n    this.refs.calculationDisplay.scrollLeft = 10000;\n    this.refs.resultDisplay.scrollLeft = 10000;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"calculator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"calculator-results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"calculationDisplay\",\n      className: \"calculationDisplay\",\n      dangerouslySetInnerHTML: {\n        __html: this.props.calculation.length ? this._replaceChars(this.props.calculation) : 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: \"resultDisplay\",\n      className: \"resultDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.props.result)), React.createElement(\"div\", {\n      className: \"calculator-inputs-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(CalcButton, {\n      value: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      text: \"Add(+)\",\n      value: \"+\",\n      additionalClass: \"operator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"calculator-inputs-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(CalcButton, {\n      value: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      text: \"Subtract(-)\",\n      value: \"-\",\n      additionalClass: \"operator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"calculator-inputs-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(CalcButton, {\n      value: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      text: \"Multiply(*)\",\n      value: \"*\",\n      additionalClass: \"operator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"calculator-inputs-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(CalcButton, {\n      value: \"clear\",\n      additionalClass: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      value: \"=\",\n      additionalClass: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(CalcButton, {\n      text: \"Divide(/)\",\n      value: \"/\",\n      additionalClass: \"operator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"calculator-inputs-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      value: \"scientificMode\",\n      className: \"scientificMode\",\n      onClick: () => {\n        this.setState({\n          toggle: !this.state.toggle\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Scientific Mode\"), React.createElement(\"button\", {\n      id: \"sign\",\n      value: \"sign\",\n      className: \"smode\",\n      disabled: this.state.toggle,\n      onClick: () => {\n        this.props.signCalculation(this.props.result);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Sign\"), React.createElement(\"button\", {\n      id: \"scientific\",\n      value: \"square\",\n      className: \"smode\",\n      disabled: this.state.toggle,\n      onClick: () => {\n        this.props.squareCalculation(this.props.result);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Square\"), React.createElement(\"button\", {\n      id: \"scientific\",\n      value: \"square_root\",\n      className: \"smode\",\n      disabled: this.state.toggle,\n      onClick: () => {\n        this.props.squareRootCalculation(this.props.result);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Square Root\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      value: \"themeToggle\",\n      className: \"theme\",\n      onclick: () => {\n        document.getElementById('theme').href = './assets/index.css';\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Theme Toggle\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCalculation: (inputValue, currentState, currentResult) => dispatch(updateCalculation(inputValue, currentState, currentResult)),\n  clearCalculation: () => dispatch(clearCalculation()),\n  equalToCalculation: () => dispatch(equalToCalculation()),\n  signCalculation: currentResult => dispatch(signCalculation(currentResult)),\n  squareCalculation: currentResult => dispatch(squareCalculation(currentResult)),\n  squareRootCalculation: currentResult => dispatch(squareRootCalculation(currentResult))\n});\n\nconst mapStateToProps = state => ({\n  calculation: state.calculation,\n  result: state.result\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CalculatorComponent);","map":{"version":3,"sources":["/Users/anikraj/Downloads/engagePulse/theme_scientific-calculator-app/src/App.js"],"names":["React","Component","connect","updateCalculation","clearCalculation","equalToCalculation","signCalculation","squareCalculation","squareRootCalculation","CalcButton","CalculatorComponent","state","toggle","componentDidMount","_forceScrollOnDisplay","componentDidUpdate","_replaceChars","value","val","slice","shift","console","log","join","replace","refs","calculationDisplay","scrollLeft","resultDisplay","render","__html","props","calculation","length","result","setState","document","getElementById","href","mapDispatchToProps","dispatch","inputValue","currentState","currentResult","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA6CC,kBAA7C,EAAgEC,eAAhE,EAAgFC,iBAAhF,EAAkGC,qBAAlG,QAA+H,WAA/H;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CACA;;AAEA,MAAMC,mBAAN,SAAkCT,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAE1CU,KAF0C,GAElC;AAACC,MAAAA,MAAM,EAAC;AAAR,KAFkC;AAAA;;AAI1CC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA,SAAKC,qBAAL;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB;AACA;AACA,SAAKD,qBAAL;AACD,GAdyC,CAgB1C;AACA;;;AACAE,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,QAAGA,KAAK,CAAC,CAAD,CAAL,KAAW,CAAX,IAAgBA,KAAK,CAAC,CAAD,CAAL,GAAS,CAA5B,EAA8B;AAC5B,UAAIC,GAAG,GAAGD,KAAK,CAACE,KAAN,EAAV;AACAD,MAAAA,GAAG,CAACE,KAAJ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAA,MAAAA,KAAK,GAAGA,KAAK,CAACM,IAAN,CAAW,EAAX,CAAR;AACAN,MAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,KAAd,EAAqB,sCAArB,CAAR;AACAP,MAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,KAAd,EAAqB,sCAArB,CAAR;AACAP,MAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,KAAd,EAAqB,sCAArB,CAAR;AACAP,MAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,IAAd,EAAoB,sCAApB,CAAR;AACAN,MAAAA,GAAG,GAAGA,GAAG,CAACK,IAAJ,CAAS,EAAT,CAAN;AACAL,MAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAY,KAAZ,EAAmB,sCAAnB,CAAN;AACAN,MAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAY,KAAZ,EAAmB,sCAAnB,CAAN;AACAN,MAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAY,KAAZ,EAAmB,sCAAnB,CAAN;AACAN,MAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAY,IAAZ,EAAkB,sCAAlB,CAAN;AACA,aAAON,GAAP;AACD;;AACDD,IAAAA,KAAK,GAAGA,KAAK,CAACM,IAAN,CAAW,EAAX,CAAR;AACAN,IAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,KAAd,EAAqB,sCAArB,CAAR;AACAP,IAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,KAAd,EAAqB,sCAArB,CAAR;AACAP,IAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,KAAd,EAAqB,sCAArB,CAAR;AACAP,IAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,IAAd,EAAoB,sCAApB,CAAR;AACA,WAAOP,KAAP;AACD;;AAEDH,EAAAA,qBAAqB,GAAG;AACtB;AACA;AACA;AACA,SAAKW,IAAL,CAAUC,kBAAV,CAA6BC,UAA7B,GAA0C,KAA1C;AACA,SAAKF,IAAL,CAAUG,aAAV,CAAwBD,UAAxB,GAAqC,KAArC;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAC,oBAAT;AAA8B,MAAA,SAAS,EAAC,oBAAxC;AAA6D,MAAA,uBAAuB,EAAE;AAAEC,QAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,MAAvB,GAAgC,KAAKjB,aAAL,CAAmB,KAAKe,KAAL,CAAWC,WAA9B,CAAhC,GAA6E;AAAvF,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,GAAG,EAAC,eAAT;AAAyB,MAAA,SAAS,EAAC,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoD,KAAKD,KAAL,CAAWG,MAA/D,CAFF,CADF,EAME;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,QAAlB;AAA2B,MAAA,KAAK,EAAC,GAAjC;AAAqC,MAAA,eAAe,EAAC,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CANF,EAaE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,aAAjB;AAA+B,MAAA,KAAK,EAAC,GAArC;AAAyC,MAAA,eAAe,EAAC,UAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAbF,EAmBE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,aAAjB;AAA+B,MAAA,KAAK,EAAC,GAArC;AAAwC,MAAA,eAAe,EAAC,UAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAnBF,EAyBE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,OAAlB;AAA0B,MAAA,eAAe,EAAC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,GAAlB;AAAsB,MAAA,eAAe,EAAC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,WAAjB;AAA6B,MAAA,KAAK,EAAC,GAAnC;AAAuC,MAAA,eAAe,EAAC,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAzBF,EA+BE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAC,gBAAd;AAA+B,MAAA,SAAS,EAAC,gBAAzC;AAA0D,MAAA,OAAO,EAAE,MAAM;AAAC,aAAKC,QAAL,CAAc;AAACvB,UAAAA,MAAM,EAAC,CAAC,KAAKD,KAAL,CAAWC;AAApB,SAAd;AAA2C,OAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAIE;AAAQ,MAAA,EAAE,EAAG,MAAb;AAAoB,MAAA,KAAK,EAAC,MAA1B;AAAiC,MAAA,SAAS,EAAC,OAA3C;AAAmD,MAAA,QAAQ,EAAG,KAAKD,KAAL,CAAWC,MAAzE;AAAiF,MAAA,OAAO,EAAE,MAAK;AAAC,aAAKmB,KAAL,CAAWzB,eAAX,CAA2B,KAAKyB,KAAL,CAAWG,MAAtC;AAA8C,OAA9I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAOE;AAAQ,MAAA,EAAE,EAAG,YAAb;AAA0B,MAAA,KAAK,EAAC,QAAhC;AAAyC,MAAA,SAAS,EAAC,OAAnD;AAA2D,MAAA,QAAQ,EAAG,KAAKvB,KAAL,CAAWC,MAAjF;AAAyF,MAAA,OAAO,EAAE,MAAK;AAAC,aAAKmB,KAAL,CAAWxB,iBAAX,CAA6B,KAAKwB,KAAL,CAAWG,MAAxC;AAAgD,OAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,EAUE;AAAQ,MAAA,EAAE,EAAG,YAAb;AAA0B,MAAA,KAAK,EAAC,aAAhC;AAA8C,MAAA,SAAS,EAAC,OAAxD;AAAgE,MAAA,QAAQ,EAAG,KAAKvB,KAAL,CAAWC,MAAtF;AAA8F,MAAA,OAAO,EAAE,MAAK;AAAC,aAAKmB,KAAL,CAAWvB,qBAAX,CAAiC,KAAKuB,KAAL,CAAWG,MAA5C;AAAoD,OAAjK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAVF,CA/BF,EA6CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAC,aAAd;AAA4B,MAAA,SAAS,EAAC,OAAtC;AAA8C,MAAA,OAAO,EAAE,MAAK;AAAEE,QAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,IAAjC,GAAuC,oBAAvC;AAA6D,OAA3H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CA7CF,CADJ;AAqDD;;AAzGyC;;AA4G5C,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCrC,EAAAA,iBAAiB,EAAE,CAACsC,UAAD,EAAaC,YAAb,EAA2BC,aAA3B,KAA6CH,QAAQ,CAACrC,iBAAiB,CAACsC,UAAD,EAAaC,YAAb,EAA2BC,aAA3B,CAAlB,CADhC;AAExCvC,EAAAA,gBAAgB,EAAE,MAAMoC,QAAQ,CAACpC,gBAAgB,EAAjB,CAFQ;AAGxCC,EAAAA,kBAAkB,EAAE,MAAMmC,QAAQ,CAACnC,kBAAkB,EAAnB,CAHM;AAIxCC,EAAAA,eAAe,EAAGqC,aAAD,IAAmBH,QAAQ,CAAClC,eAAe,CAACqC,aAAD,CAAhB,CAJJ;AAKxCpC,EAAAA,iBAAiB,EAAGoC,aAAD,IAAmBH,QAAQ,CAACjC,iBAAiB,CAACoC,aAAD,CAAlB,CALN;AAMxCnC,EAAAA,qBAAqB,EAAGmC,aAAD,IAAmBH,QAAQ,CAAChC,qBAAqB,CAACmC,aAAD,CAAtB;AANV,CAAf,CAA3B;;AASA,MAAMC,eAAe,GAAIjC,KAAD,KAAY;AAClCqB,EAAAA,WAAW,EAAErB,KAAK,CAACqB,WADe;AAElCE,EAAAA,MAAM,EAAEvB,KAAK,CAACuB;AAFoB,CAAZ,CAAxB;;AAKA,eAAehC,OAAO,CAAC0C,eAAD,EAAkBL,kBAAlB,CAAP,CAA6C7B,mBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateCalculation, clearCalculation,equalToCalculation,signCalculation,squareCalculation,squareRootCalculation } from './actions';\nimport CalcButton from './components/CalcButton';\n//import ScientificCalcButton from './components/ScientificCalcButton';\n\nclass CalculatorComponent extends Component {\n\n  state = {toggle:true};\n\n  componentDidMount() {\n    // Force scroll on the display\n    // I do this on mount in case reducer is already populated\n    this._forceScrollOnDisplay();\n  }\n  \n  componentDidUpdate() {\n    // Force scroll on the display\n    // this function gets called on component update\n    this._forceScrollOnDisplay();\n  }\n\n  // Replace the operator chars add a span for styling\n  // and replace division and multiplication symbols\n  _replaceChars(value) {\n    if(value[0]===0 && value[1]<0){\n      var val = value.slice();\n      val.shift();\n      console.log(value);\n      value = value.join(\"\");\n      value = value.replace(/\\//g, '<span class=\"operatorStyle\">÷</span>');\n      value = value.replace(/\\*/g, '<span class=\"operatorStyle\">×</span>');\n      value = value.replace(/\\+/g, '<span class=\"operatorStyle\">+</span>');\n      value = value.replace(/-/g, '<span class=\"operatorStyle\">-</span>');\n      val = val.join(\"\");\n      val = val.replace(/\\//g, '<span class=\"operatorStyle\">÷</span>');\n      val = val.replace(/\\*/g, '<span class=\"operatorStyle\">×</span>');\n      val = val.replace(/\\+/g, '<span class=\"operatorStyle\">+</span>');\n      val = val.replace(/-/g, '<span class=\"operatorStyle\">-</span>');\n      return val;\n    }\n    value = value.join(\"\");\n    value = value.replace(/\\//g, '<span class=\"operatorStyle\">÷</span>');\n    value = value.replace(/\\*/g, '<span class=\"operatorStyle\">×</span>');\n    value = value.replace(/\\+/g, '<span class=\"operatorStyle\">+</span>');\n    value = value.replace(/-/g, '<span class=\"operatorStyle\">-</span>');\n    return value;\n  }\n\n  _forceScrollOnDisplay() {\n    // Force scroll on div, put a value in here\n    // instead of calculating the offset\n    // This keeps the latest numbers in display\n    this.refs.calculationDisplay.scrollLeft = 10000;\n    this.refs.resultDisplay.scrollLeft = 10000;\n  }\n\n  render() {\n    return (\n        <div className='calculator'>\n          <div className='calculator-results'>\n            <div ref='calculationDisplay' className='calculationDisplay' dangerouslySetInnerHTML={{ __html: this.props.calculation.length ? this._replaceChars(this.props.calculation) : 0 }} />\n            <div ref='resultDisplay' className='resultDisplay'>{this.props.result}</div>\n          </div>\n          \n          <div className='calculator-inputs-row'>\n            <CalcButton value={1} />\n            <CalcButton value={2} />\n            <CalcButton value={3} />\n            <CalcButton text =\"Add(+)\" value=\"+\" additionalClass=\"operator\" />\n          </div>\n          \n          <div className='calculator-inputs-row'>\n            <CalcButton value={4} />\n            <CalcButton value={5} />\n            <CalcButton value={6} />\n            <CalcButton text='Subtract(-)' value=\"-\" additionalClass=\"operator\" />\n          </div>\n          <div className='calculator-inputs-row'>\n            <CalcButton value={7} />\n            <CalcButton value={8} />\n            <CalcButton value={9} />\n            <CalcButton text='Multiply(*)' value=\"*\"additionalClass=\"operator\" />\n          </div>\n          <div className='calculator-inputs-row'>\n            <CalcButton value='clear' additionalClass=\"clear\"/>\n            <CalcButton value={0} />\n            <CalcButton value='=' additionalClass=\"equal\" />\n            <CalcButton text='Divide(/)' value=\"/\" additionalClass=\"operator\" />\n          </div>\n          <div className='calculator-inputs-row'>\n            <button value='scientificMode' className=\"scientificMode\" onClick={() => {this.setState({toggle:!this.state.toggle})}} >\n              Scientific Mode\n            </button>\n            <button id = \"sign\" value='sign' className=\"smode\" disabled= {this.state.toggle} onClick={() =>{this.props.signCalculation(this.props.result)}} >\n              Sign\n            </button>\n            <button id = \"scientific\" value='square' className=\"smode\" disabled= {this.state.toggle} onClick={() =>{this.props.squareCalculation(this.props.result)}} >\n              Square\n            </button>\n            <button id = \"scientific\" value='square_root' className=\"smode\" disabled= {this.state.toggle} onClick={() =>{this.props.squareRootCalculation(this.props.result)}}>\n              Square Root\n            </button>\n          </div>\n          <div>\n            <button value='themeToggle' className=\"theme\" onclick={()=> { document.getElementById('theme').href ='./assets/index.css' } }>\n              Theme Toggle\n            </button>\n          </div>\n        </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateCalculation: (inputValue, currentState, currentResult) => dispatch(updateCalculation(inputValue, currentState, currentResult)),\n  clearCalculation: () => dispatch(clearCalculation()),\n  equalToCalculation: () => dispatch(equalToCalculation()),\n  signCalculation: (currentResult) => dispatch(signCalculation(currentResult)),\n  squareCalculation: (currentResult) => dispatch(squareCalculation(currentResult)),\n  squareRootCalculation: (currentResult) => dispatch(squareRootCalculation(currentResult))\n});\n\nconst mapStateToProps = (state) => ({\n  calculation: state.calculation,\n  result: state.result\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CalculatorComponent);\n"]},"metadata":{},"sourceType":"module"}