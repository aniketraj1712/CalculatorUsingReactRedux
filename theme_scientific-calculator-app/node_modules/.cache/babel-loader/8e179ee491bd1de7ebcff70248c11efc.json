{"ast":null,"code":"import { calculation, addValueToCalculation } from '../utils';\nimport { UPDATE_CALCULATION_AND_RESULT, CLEAR_ALL, EQUAL_TO, SIGN, SQUARE, SQUARE_ROOT } from '../constants';\nexport const updateCalculation = (inputValue, currentState, currentResult) => {\n  // Update the calculation and the result\n  // Get the current calc array \n  // Convert calc array to string\n  // Split string based on operators (/ * - +)\n  // Loop over array and make calculation\n  let updateCalculationArray = addValueToCalculation(inputValue, currentState);\n  let calculationResult = calculation(updateCalculationArray, currentResult);\n  return {\n    type: UPDATE_CALCULATION_AND_RESULT,\n    payload: {\n      calculation: updateCalculationArray,\n      result: calculationResult\n    }\n  };\n}; // TODO Make the calculation\n\nexport const clearCalculation = () => {\n  return {\n    type: CLEAR_ALL,\n    payload: {\n      calculation: [],\n      result: 0\n    }\n  };\n};\nexport const equalToCalculation = currentResult => {\n  return {\n    type: EQUAL_TO,\n    payload: {\n      calculation: [0, currentResult],\n      result: currentResult\n    }\n  };\n};\nexport const signCalculation = currentResult => {\n  let signChangedResult = -parseInt(currentResult);\n  return {\n    type: SIGN,\n    payload: {\n      calculation: [0, signChangedResult],\n      result: signChangedResult\n    }\n  };\n};\nexport const squareCalculation = currentResult => {\n  let squareResult = Math.pow(currentResult, 2);\n  return {\n    type: SQUARE,\n    payload: {\n      calculation: [squareResult],\n      result: squareResult\n    }\n  };\n};\nexport const squareRootCalculation = currentResult => {\n  let squareRootResult = Math.pow(parseInt(currentResult), 0.5);\n  return {\n    type: SQUARE_ROOT,\n    payload: {\n      calculation: [squareRootResult],\n      result: squareRootResult\n    }\n  };\n};","map":{"version":3,"sources":["/Users/anikraj/Downloads/engagePulse/scientific-calculator-app/src/actions/index.js"],"names":["calculation","addValueToCalculation","UPDATE_CALCULATION_AND_RESULT","CLEAR_ALL","EQUAL_TO","SIGN","SQUARE","SQUARE_ROOT","updateCalculation","inputValue","currentState","currentResult","updateCalculationArray","calculationResult","type","payload","result","clearCalculation","equalToCalculation","signCalculation","signChangedResult","parseInt","squareCalculation","squareResult","Math","pow","squareRootCalculation","squareRootResult"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,qBAAtB,QAAmD,UAAnD;AACA,SAASC,6BAAT,EAAwCC,SAAxC,EAAkDC,QAAlD,EAA2DC,IAA3D,EAAgEC,MAAhE,EAAuEC,WAAvE,QAA0F,cAA1F;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,UAAD,EAAaC,YAAb,EAA2BC,aAA3B,KAA6C;AAC5E;AACA;AACA;AACA;AACA;AACA,MAAIC,sBAAsB,GAAGX,qBAAqB,CAACQ,UAAD,EAAaC,YAAb,CAAlD;AACA,MAAIG,iBAAiB,GAAGb,WAAW,CAACY,sBAAD,EAAyBD,aAAzB,CAAnC;AAEA,SAAO;AACLG,IAAAA,IAAI,EAAEZ,6BADD;AAELa,IAAAA,OAAO,EAAE;AACPf,MAAAA,WAAW,EAAEY,sBADN;AAEPI,MAAAA,MAAM,EAAEH;AAFD;AAFJ,GAAP;AAOD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMI,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLH,IAAAA,IAAI,EAAEX,SADD;AAELY,IAAAA,OAAO,EAAE;AACPf,MAAAA,WAAW,EAAE,EADN;AAEPgB,MAAAA,MAAM,EAAE;AAFD;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,MAAME,kBAAkB,GAAIP,aAAD,IAAmB;AACnD,SAAO;AACLG,IAAAA,IAAI,EAAEV,QADD;AAELW,IAAAA,OAAO,EAAE;AACPf,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAGW,aAAH,CADN;AAEPK,MAAAA,MAAM,EAAEL;AAFD;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,MAAMQ,eAAe,GAAIR,aAAD,IAAmB;AAChD,MAAIS,iBAAiB,GAAG,CAACC,QAAQ,CAACV,aAAD,CAAjC;AACA,SAAO;AACLG,IAAAA,IAAI,EAAET,IADD;AAELU,IAAAA,OAAO,EAAE;AACPf,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAGoB,iBAAH,CADN;AAEPJ,MAAAA,MAAM,EAAEI;AAFD;AAFJ,GAAP;AAOD,CATM;AAWP,OAAO,MAAME,iBAAiB,GAAIX,aAAD,IAAmB;AAClD,MAAIY,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASd,aAAT,EAAuB,CAAvB,CAAnB;AACA,SAAO;AACLG,IAAAA,IAAI,EAAER,MADD;AAELS,IAAAA,OAAO,EAAE;AACPf,MAAAA,WAAW,EAAE,CAACuB,YAAD,CADN;AAEPP,MAAAA,MAAM,EAAEO;AAFD;AAFJ,GAAP;AAOD,CATM;AAWP,OAAO,MAAMG,qBAAqB,GAAIf,aAAD,IAAmB;AACtD,MAAIgB,gBAAgB,GAAGH,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACV,aAAD,CAAjB,EAAiC,GAAjC,CAAvB;AACA,SAAO;AACLG,IAAAA,IAAI,EAAEP,WADD;AAELQ,IAAAA,OAAO,EAAE;AACPf,MAAAA,WAAW,EAAE,CAAC2B,gBAAD,CADN;AAEPX,MAAAA,MAAM,EAAEW;AAFD;AAFJ,GAAP;AAOD,CATM","sourcesContent":["import { calculation, addValueToCalculation } from '../utils';\nimport { UPDATE_CALCULATION_AND_RESULT, CLEAR_ALL,EQUAL_TO,SIGN,SQUARE,SQUARE_ROOT } from '../constants';\n\nexport const updateCalculation = (inputValue, currentState, currentResult) => {\n  // Update the calculation and the result\n  // Get the current calc array \n  // Convert calc array to string\n  // Split string based on operators (/ * - +)\n  // Loop over array and make calculation\n  let updateCalculationArray = addValueToCalculation(inputValue, currentState);\n  let calculationResult = calculation(updateCalculationArray, currentResult);\n\n  return {\n    type: UPDATE_CALCULATION_AND_RESULT,\n    payload: {\n      calculation: updateCalculationArray, \n      result: calculationResult\n    }\n  }\n};\n\n// TODO Make the calculation\nexport const clearCalculation = () => {\n  return {\n    type: CLEAR_ALL,\n    payload: {\n      calculation: [], \n      result: 0\n    }\n  }\n};\n\nexport const equalToCalculation = (currentResult) => {\n  return {\n    type: EQUAL_TO,\n    payload: {\n      calculation: [0,currentResult], \n      result: currentResult\n    }\n  }\n};\n\nexport const signCalculation = (currentResult) => {\n  let signChangedResult = -parseInt(currentResult);\n  return {\n    type: SIGN,\n    payload: {\n      calculation: [0,signChangedResult], \n      result: signChangedResult\n    }\n  }\n};\n\nexport const squareCalculation = (currentResult) => {\n  let squareResult = Math.pow(currentResult,2);\n  return {\n    type: SQUARE,\n    payload: {\n      calculation: [squareResult], \n      result: squareResult\n    }\n  }\n};\n\nexport const squareRootCalculation = (currentResult) => {\n  let squareRootResult = Math.pow(parseInt(currentResult),0.5);\n  return {\n    type: SQUARE_ROOT,\n    payload: {\n      calculation: [squareRootResult], \n      result: squareRootResult\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}